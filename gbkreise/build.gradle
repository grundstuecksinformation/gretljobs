plugins {
    id 'ch.so.agi.gretl'
    id 'de.undercouch.download'
}

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

defaultTasks "importData"

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")

def pathToDataZip = Paths.get(pathToTempFolder, "ch.so.agi.av_gb_administrative_einteilungen_xtf.zip")
def plzXtfFilePath = Paths.get(pathToUnzipFolder.toString(), 'PLZO_INTERLIS_LV95', 'PLZO_ITF_LV95.itf')

def dbschemas = ["live"]

tasks.register("downloadData", S3Download) {
    accessKey = awsAccessKeyAgi
    secretKey = awsSecretAccessKeyAgi
    downloadDir = file(pathToTempFolder)
    bucketName = "ch.so.agi.geodata"
    key = "ch.so.agi.av_gb_administrative_einteilungen_xtf.zip"
    endPoint = "https://s3.eu-central-1.amazonaws.com" 
    region = "eu-central-1"

    doLast {
        println "File downloaded to: " + pathToTempFolder
    }
}

tasks.register("unzipData", Copy) {
    dependsOn tasks.named("downloadData")
    from zipTree(pathToDataZip)
    into file(pathToUnzipFolder)
    include "**/*.xtf"

    doLast {
        println "File unzipped to directory: " + pathToUnzipFolder
    }    
}

dbschemas.each { dbSchema ->
    tasks.register("importData_$dbSchema", Ili2pgReplace) {
        dependsOn tasks.named("unzipData")
        database {
            uri = dbUriOereb
            user = dbUserOereb
            password = dbPwdOereb
        }
        dbschema = dbSchema
        models = "SO_AGI_AV_GB_Administrative_Einteilungen_Publikation_20180822"
        dataFile = file(Paths.get(pathToUnzipFolder.toString(), "ch.so.agi.av_gb_administrative_einteilungen.xtf"))
        dataset = 'ch.so.agi.av-gb-administrative-einteilung'
        disableValidation = true

    }
}

tasks.register("importData") {
    description = "Aggregation task."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('importData_') }
    }
}