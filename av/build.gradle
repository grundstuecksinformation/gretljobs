plugins {
    id 'ch.so.agi.gretl'
    id 'de.undercouch.download'
}

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

defaultTasks "importData"

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")

def dbschemas = ["live"]

def baseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.agi.av.dm01avch24lv95d/"
def datasets = ["2401","2402","2403","2404","2405","2406","2407","2408","2421","2422","2424","2425","2426","2427","2428","2430","2445","2455","2456","2457","2461","2463","2464","2465","2471","2472","2473","2474","2475","2476","2477","2478","2479","2480","2481","2491","2492","2493","2495","2497","2499","2500","2501","2502","2503","2511","2513","2514","2516","2517","2518","2519","2520","2523","2524","2525","2526","2527","2528","2529","2530","2532","2534","2535","2541","2542","2543","2544","2545","2546","2547","2548","2549","2550","2551","2553","2554","2555","2556","2571","2572","2573","2574","2575","2576","2578","2579","2580","2581","2582","2583","2584","2585","2586","2601","2611","2612","2613","2614","2615","2616","2617","2618","2619","2620","2621","2622"]
//def datasets = ["2615"]

datasets.each { dataSet ->
    tasks.register("downloadDataset_$dataSet", Download) {
        src baseUrl + dataSet.toString() + "00.itf.zip"
        dest pathToTempFolder
        overwrite true
        doLast {
            println "File downloaded to: " + pathToTempFolder
        }
    }

    tasks.register("unzipFile_$dataSet", Copy) {
        dependsOn tasks.named("downloadDataset_$dataSet")
        from zipTree(Paths.get(pathToTempFolder, dataSet + "00.itf.zip"))
        into file(Paths.get(pathToUnzipFolder.toString(), dataSet))
        doLast {
            println "File unzipped to: " + pathToUnzipFolder
        }
    }

    dbschemas.each { dbSchema -> 
        tasks.register("importData_$dataSet\_$dbSchema", Ili2pgReplace) {
            dependsOn tasks.named("unzipFile_$dataSet")
            //dependsOn ("unzipFile_$dataSet")
            database {
                uri = dbUriOereb
                user = dbUserOereb
                password = dbPwdOereb
            }
            dbschema = dbSchema
            models = "DM01AVCH24LV95D"
            /*
            def inputFile = file(Paths.get(pathToUnzipFolder.toString(), dataSet + "00.itf"))
            dataFile = inputFile
            */
            dataFile = file(Paths.get(pathToUnzipFolder.toString(), dataSet, dataSet + "00.itf"))
            //dataFile = Paths.get(tasks.("unzipFile_$dataSet").destinationDir.getAbsolutePath(), dataSet + "00.itf")
            dataset = dataSet // muss String sein
            disableValidation = true

        }
    }
}

tasks.register("importData") {
    description = "Aggregation task."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('importData_') }
    }
}